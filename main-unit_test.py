# Generated by Qodo Gen
from func import _write
import unittest

class Test_Write(unittest.TestCase):

    # Manages file permission errors gracefully
    def test_file_permission_error(self):
        import os
        os.chmod('assets/processed_file.txt', 0o444)  # Read-only permission
        with self.assertRaises(PermissionError):
            _write()
        os.chmod('assets/processed_file.txt', 0o666)  # Restore permissions

    # Verifies that each line ends with a newline character
    def test_lines_end_with_newline(self):
        _write()
        with open('assets/processed_file.txt', 'r') as read_:
            lines = read_.readlines()
            for line in lines:
                self.assertTrue(line.endswith('\n'))

    # Confirms that no additional content is appended to the file
    def test_no_additional_content_appended(self):
        import os
        from func import _write
        from assets.array import text

        # Create a backup of the original file content
        if os.path.exists('assets/processed_file.txt'):
            with open('assets/processed_file.txt', 'r') as original_file:
                original_content = original_file.read()

        # Write to the file using the _write function
        _write()

        # Read the file content after writing
        with open('assets/processed_file.txt', 'r') as written_file:
            written_content = written_file.read()

        # Check that the written content matches the expected content
        expected_content = '\n'.join(text) + '\n'
        self.assertEqual(written_content, expected_content)

        # Restore the original file content if it existed
        if 'original_content' in locals():
            with open('assets/processed_file.txt', 'w') as original_file:
                original_file.write(original_content)