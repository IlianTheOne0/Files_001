# Generated by Qodo Gen
from func import main
import unittest
import os

class TestMain(unittest.TestCase):

    # Successfully reads from 'assets/original_file.txt' and writes to 'assets/processed_file.txt'
    def test_successful_read_and_write(self):
        with open('assets/original_file.txt', 'w') as f:
            f.write('Line 1\nLine 2\nLine 3\n')
    
        main()
    
        with open('assets/processed_file.txt', 'r') as f:
            lines = f.readlines()
    
        self.assertEqual(lines, ['Line 3\n', 'Line 2\n', 'Line 1\n'])

    # Processes large files efficiently without performance issues
    def test_large_file_processing_efficiency(self):
        # Create a large file for testing
        with open('assets/original_file.txt', 'w') as f:
            for i in range(10000):
                f.write(f'Line {i}\n')

        # Run the main function
        main()

        # Verify the processed file
        with open('assets/processed_file.txt', 'r') as f:
            lines = f.readlines()

        # Check if the lines are reversed correctly
        self.assertEqual(lines[0], 'Line 9999\n')
        self.assertEqual(lines[-1], 'Line 0\n')

    # Correctly reverses the order of lines in the output file
    def test_reverse_order_of_lines(self):
        with open('assets/original_file.txt', 'w') as f:
            f.write('First line\nSecond line\nThird line\n')

        main()

        with open('assets/processed_file.txt', 'r') as f:
            lines = f.readlines()

        self.assertEqual(lines, ['Third line\n', 'Second line\n', 'First line\n'])